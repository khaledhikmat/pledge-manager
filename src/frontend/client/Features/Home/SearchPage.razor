@page "/search/{SearchTerm}"
@page "/search/{SearchTerm}/maxgoal/{MaxGoal:int}"
@inject NavigationManager NavManager
@inject HttpClient Http

<PageTitle>Search Campaigns</PageTitle>

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/">Home</a></li>
        <li class="breadcrumb-item active" aria-current="page">Search</li>
    </ol>
</nav>

<h3 class="mt-5 mb-4">Search results for "@SearchTerm"</h3>

<SearchFilter SearchTerm="@SearchTerm" />

@if (_searchResults == null)
{
    <p>Loading search results...</p>
}
else
{
    <CampaignDrawer Campaign="_selectedCampaign" />

    <CampaignSearch />
    
    <div class="grid">
        @foreach (var campaign in _searchResults)
        {
            <CampaignCard Campaign="campaign" OnSelected="HandleCampaignSelected"  OnMonitor="HandleCampaignMonitored"/>
        }
    </div>
}

@code {
    private IEnumerable<Campaign>? _searchResults;
    private IEnumerable<Campaign> _cachedSearchResults = Array.Empty<Campaign>();
    private Campaign? _selectedCampaign;

    [Parameter] public string SearchTerm { get; set; } = default!;
    [Parameter] public int? MaxGoal { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var allCampaigns = await Http.GetFromJsonAsync<List<Campaign>>("/function/campaigns") ?? new List<Campaign>();
            _searchResults = allCampaigns!.Where(x => x.Title.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase)
                                            || x.Description.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase));
            _cachedSearchResults = _searchResults;
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"There was a problem loading campaign data: {ex.Message}");
        }
    }

    protected override void OnParametersSet()
    {
        if (_cachedSearchResults.Any() && MaxGoal.HasValue)
        {
            _searchResults = _cachedSearchResults.Where(x => x.Goal <= MaxGoal.Value);
        }
        else if (_cachedSearchResults.Any() && MaxGoal is null)
        {
            _searchResults = _cachedSearchResults;
        }
    }

    private void HandleCampaignSelected(Campaign campaign) 
        => _selectedCampaign = campaign;

    private void HandleCampaignMonitored(Campaign campaign)
    {
        NavManager.NavigateTo($"/campaign/{campaign.Identifier}");
    }
}
