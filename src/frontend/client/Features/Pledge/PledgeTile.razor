@using System.Globalization
@inject HttpClient _httpClient
@inject DialogService _dialogService
@inject TokenAuthenticationStateProvider _tokenAuthStateProvider

<RadzenCard>
    <div class="row">
        <div class="@ColumnSize">
            <div><b>@if (!Pledge.IsAnonymous) {@Pledge.UserName @if (!string.IsNullOrEmpty(Pledge.Name)){<br><span>&nbsp;@Pledge.Name</span>}} else {<span>Anonymous</span>}</b></div>
        </div>
        <div class="@ColumnSize">
            <div><b><RadzenBadge BadgeStyle="BadgeStyle.Secondary" Class="price-badge" Text=@($"{Utilities.FormatAsUSD(Pledge.Amount)}")></RadzenBadge></b></div>
        </div>
        <div class="@ColumnSize">
            <div><b>@if (Pledge.IsMatch) {<span>Match</span>} else if (Pledge.IsDeferred) {<span>Match</span>} else {<span>Normal</span>}</b></div>
        </div>
        @if (IsCommands)
        {
            <div class="@ColumnSize">
                <div>
                    @if (Pledge.CanShowApproval()) {<span class="mr-2"><button class="btn btn-success w-100" @onclick="(() => ApprovePledge())">APPROVE</button></span>} else {<span></span>}
                </div>
            </div>
            <div class="@ColumnSize">
                <div>
                    @if (Pledge.CanShowRejection()) {<span class="mr-2"><button class="btn btn-danger w-100" @onclick="(() => RejectPledge())">REJECT</button></span>} else {<span></span>}
                </div>
            </div>
            <div class="@ColumnSize">
                <div>
                    @if (Pledge.CanShowEmphasize()) {<span class="mr-2"><button class="btn btn-warning w-100" @onclick="(() => EmphasizePledge())">SHOW</button></span>} else {<span></span>}
                </div>
            </div>
        }
    </div>
</RadzenCard>

@code {
    [Parameter] 
    public Campaign Campaign { get; set; } = default!;

    [Parameter] 
    public Pledge Pledge { get; set; } = default!;

    [Parameter] 
    public bool IsCommands { get; set; } = false!;

    private string _commandConfirmation = "";

    private string _userName = "";

    public string ColumnSize 
    {
        get {
            return IsCommands ? "col-md-2" : "col-md-4";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authstate = await _tokenAuthStateProvider.GetAuthenticationStateAsync();
        var user = authstate.User;
        _userName = (user != null && user.Identity != null) ? user.Identity.Name : "Unkown";
    }

    private async Task ApprovePledge()
    {
        try
        {
            this._commandConfirmation = "";
            var command = new CampaignCommand();
            command.CampaignIdentifier = Campaign.Identifier;
            command.UserName = _userName;
            command.Command = CampaignCommand.APPROVE_PLEDGE;
            command.Arg1 = Pledge.Identifier;

            var response = await _httpClient.PostAsJsonAsync<CampaignCommand>($"function/campaigns/{Campaign.Identifier}/commands", command);
            if (!response.IsSuccessStatusCode) 
            {
                throw new ApplicationException($"{response.StatusCode}-{response.ReasonPhrase}");
            }

            this._commandConfirmation = await response.Content.ReadAsStringAsync();
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"There was a problem commanding: {ex.Message}");
        }
    }

    private async Task RejectPledge()
    {
        try
        {
            this._commandConfirmation = "";
            var command = new CampaignCommand();
            command.CampaignIdentifier = Campaign.Identifier;
            command.UserName = _userName;
            command.Command = CampaignCommand.REJECT_PLEDGE;
            command.Arg1 = Pledge.Identifier;

            var response = await _httpClient.PostAsJsonAsync<CampaignCommand>($"function/campaigns/{Campaign.Identifier}/commands", command);
            if (!response.IsSuccessStatusCode) 
            {
                throw new ApplicationException($"{response.StatusCode}-{response.ReasonPhrase}");
            }

            this._commandConfirmation = await response.Content.ReadAsStringAsync();
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"There was a problem commanding: {ex.Message}");
        }
    }

    private async Task EmphasizePledge()
    {
        string error = "";

        try
        {
            Console.WriteLine($"Firing a SignalR event from pledge tile: {Pledge.Identifier}");
            var response = await _httpClient.PostAsJsonAsync<Pledge>($"function/signalr/pledges", Pledge);
            if (!response.IsSuccessStatusCode) 
            {
                throw new ApplicationException($"{response.StatusCode}-{response.ReasonPhrase}");
            }
        }
        catch (HttpRequestException ex)
        {
            error = ex.Message;
            Console.WriteLine($"There was a problem emphasizing: {ex.Message}");
        }
        finally
        {
            await _dialogService.OpenAsync($"Pledge Emphasize", ds =>
                @<div>
                <p class="mb-4">@(string.IsNullOrEmpty(error) ? "Success. Pledge should appear on public views" : $"Sorry...ran into en error: {error}")</p>
                </div>, 
                new DialogOptions() { CloseDialogOnOverlayClick = true }
            );

        }
    }
}