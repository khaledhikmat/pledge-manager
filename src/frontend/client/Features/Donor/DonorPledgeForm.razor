@inject HttpClient _httpClient

<h3>Donor Pledge</h3>

@if (_showSuccess)
{
    <blockquote>
        <strong>Pledge submitted successful. Thank you.</strong>
    </blockquote>
}

<RadzenCard>
    <EditForm Model="_formPledge" OnValidSubmit="HandleFormSubmit">
        <FluentValidationValidator />
        <ValidationSummary/>

        <p>
            <label for="anonymous">Anonymous?</label>
            <InputCheckbox id="anonymous" @bind-Value="@_formPledge.IsAnonymous" />
            <ValidationMessage For="() => _formPledge.IsAnonymous" />
        </p>

        <p>
            <label for="name">Name: </label>
            <InputText id="name" @bind-Value="@_formPledge.Name" Disabled="@_formPledge.IsAnonymous"/>
            <ValidationMessage For="@(() => _formPledge.Name)" />
        </p>
    
        <p>
            <label for="amount">Amount: </label>
            <InputNumber id="amount" @bind-Value="@_formPledge.Amount" />
            <ValidationMessage For="@(() => _formPledge.Amount)" />
        </p>

        <p>
            <label for="match">Match?</label>
            <InputCheckbox id="match" @bind-Value="@_formPledge.IsMatch" />
            <ValidationMessage For="() => _formPledge.IsMatch" />
        </p>

        <p>
            <label for="match">Deferred?</label>
            <InputCheckbox id="match" @bind-Value="@_formPledge.IsDeferred" />
            <ValidationMessage For="() => _formPledge.IsDeferred" />
        </p>

        <button type="submit">PLEDGE</button>
    </EditForm>
</RadzenCard>

@code {
    bool _showSuccess = false;

    private Campaign _selectedCampaign = new Campaign();
    private Pledge _formPledge = new Pledge();

    [Parameter] public string Id { get; set; } = default!;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            _selectedCampaign = await _httpClient.GetFromJsonAsync<Campaign>($"function/campaigns/{Id}") ?? new Campaign();
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"There was a problem loading campaign data: {ex.Message}");
        }
    }

    private async Task HandleFormSubmit()
    {
        try
        {
            _showSuccess = false;

            _formPledge.CampaignIdentifier = _selectedCampaign.Identifier;
            _formPledge.UserName = "2105551207"; //TODO:
            _formPledge.Name = _formPledge.IsAnonymous ? "Anonymous" : _formPledge.Name;
            var response = await _httpClient.PostAsJsonAsync<Pledge>($"function/campaigns/{_selectedCampaign.Identifier}/pledges", _formPledge);
            if (!response.IsSuccessStatusCode) 
            {
                throw new ApplicationException($"{response.StatusCode}-{response.ReasonPhrase}");
            }

            _formPledge.Confirmation = await response.Content.ReadAsStringAsync();
            _showSuccess = true;
            _formPledge = new Pledge();
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"There was a problem donating: {ex.Message}");
        }
    }
}
