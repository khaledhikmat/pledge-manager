@inject HttpClient _httpClient

<h1>Campaign Behavior Update</h1>

@if (_showSuccess)
{
    <blockquote>
        <strong>Campaign Behavior Saved Successfully!</strong>
    </blockquote>
}

<RadzenCard>
    <EditForm Model="_selectedCampaign" OnValidSubmit="HandleFormSubmit">
        <FluentValidationValidator />
        <ValidationSummary/>

        <p>
            <label for="title">Title: </label>
            <InputText id="title" @bind-Value="@_selectedCampaign.Title" />
            <ValidationMessage For="@(() => _selectedCampaign.Title)" />
        </p>
    
        <p>
            <label for="desc">Description: </label>
            <InputText id="desc" @bind-Value="@_selectedCampaign.Description" />
            <ValidationMessage For="@(() => _selectedCampaign.Description)" />
        </p>

        <p>
            <label for="imageUrl">Image URL: </label>
            <InputText id="imageUrl" @bind-Value="@_selectedCampaign.ImageUrl" />
            <ValidationMessage For="@(() => _selectedCampaign.ImageUrl)" />
        </p>

        <p>
            <label for="goalamount">Goal: </label>
            <InputNumber id="goalamount" @bind-Value="@_selectedCampaign.Goal" />
            <ValidationMessage For="@(() => _selectedCampaign.Goal)" />
        </p>
    
        <p>
            <label for="mode">Mode</label>
            <InputSelect id="mode" type="text" @bind-Value="@_selectedCampaign.Behavior.PledgeMode">
                <option value="@CampaignPledgeModes.AutoApproval">Auto</option>
                <option value="@CampaignPledgeModes.ManualApproval">Manual</option>
                <option value="@CampaignPledgeModes.HybridApproval">Hybrid</option>
            </InputSelect>
            <ValidationMessage For="() => _selectedCampaign.Behavior.PledgeMode" />
        </p>

        <p>
            <label for="autoapprove">Auto Approve if amount is less than: </label>
            <InputNumber id="autoapprove" @bind-Value="@_selectedCampaign.Behavior.AutoApprovePledgeIfAmountLE" />
            <ValidationMessage For="@(() => _selectedCampaign.Behavior.AutoApprovePledgeIfAmountLE)" />
        </p>
    
        <p>
            <label for="anonymous">Auto Approve if anonymous</label>
            <InputCheckbox id="anonymous" @bind-Value="@_selectedCampaign.Behavior.AutoApprovePledgeIfAnonymous" />
            <ValidationMessage For="() => _selectedCampaign.Behavior.AutoApprovePledgeIfAnonymous" />
        </p>

        <p>
            <label for="goal">Deactive When Goal Reached</label>
            <InputCheckbox id="goal" @bind-Value="@_selectedCampaign.Behavior.AutoDeactivateWhenGoalReached" />
            <ValidationMessage For="() => _selectedCampaign.Behavior.AutoDeactivateWhenGoalReached" />
        </p>

        <p>
            <label for="emphasis-startup">Emphasis Startup in msecs: </label>
            <InputNumber id="emphasis-startup" @bind-Value="@_selectedCampaign.Behavior.EmphasisPledgeDialogStartup" />
            <ValidationMessage For="@(() => _selectedCampaign.Behavior.EmphasisPledgeDialogStartup)" />
        </p>
    
        <p>
            <label for="emphasis-vis-duration">Emphasis Visibility Duration in msecs: </label>
            <InputNumber id="emphasis-vis-duration" @bind-Value="@_selectedCampaign.Behavior.EmphasisPledgeDialogVisibility" />
            <ValidationMessage For="@(() => _selectedCampaign.Behavior.EmphasisPledgeDialogVisibility)" />
        </p>

        <button type="submit">SAVE</button>
    </EditForm>
</RadzenCard>

@code {
    [Parameter] 
    public string Id { get; set; } = default!;

    bool _showSuccess = false;
    private Campaign _selectedCampaign = new Campaign();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _selectedCampaign = await _httpClient.GetFromJsonAsync<Campaign>($"function/campaigns/{this.Id}") ?? new Campaign();
            Console.WriteLine($"retrieved campaign successfully!");
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"There was a problem loading campaign data: {ex.Message}");
        }
    }

    private async Task HandleFormSubmit()
    {
        try
        {
            var response = await _httpClient.PostAsJsonAsync<Campaign>($"function/campaigns/{_selectedCampaign.Identifier}/updates", _selectedCampaign);
            if (!response.IsSuccessStatusCode) 
            {
                throw new ApplicationException($"{response.StatusCode}-{response.ReasonPhrase}");
            }

            _showSuccess = true;
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"There was a problem updating: {ex.Message}");
        }
    }
}