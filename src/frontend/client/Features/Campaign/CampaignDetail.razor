@page "/campaign/{Id}"
@attribute [Authorize]

@using System.Globalization
@using BlazorComponentBus
@using System.Timers
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager _navigationManager
@inject DialogService _dialogService
@inject HttpClient _httpClient
@inject ILocalStorageService _locaStorage
@inject BlazorComponentBus.ComponentBus _bus
@implements IAsyncDisposable

<PageTitle>Campaign @Id</PageTitle>

<RadzenBreadCrumb>
    <RadzenBreadCrumbItem Path="/" Text="Home" />
    <RadzenBreadCrumbItem Icon="add" Text="Campaign Detail" />
</RadzenBreadCrumb>
                
@if (_selectedCampaign == null)
{
    <p><em>Loading...</em></p>
}
else
{

<AuthorizeView Roles="Organizer">
    <Authorized>
        <div class="form-group">
        <button @onclick="SwitchToPublicView" disabled="@(!_isUserView && !_isOrganizerView)">Public View</button>    
        <button @onclick="SwitchToUserView" disabled="@(!_isPublicView && !_isOrganizerView)">User View</button>    
        <button @onclick="SwitchToOrganizerView" disabled="@(!_isUserView && !_isPublicView)">Organizer View</button>    
        </div>
        <br>

        @if (this._isOrganizerView)
        {
        <div class="row">
            <div class="col-md-12">
                <CampaignMatchesHeader
                    Campaign="@_selectedCampaign">
                </CampaignMatchesHeader>
            </div>
        </div>
        <br>
        }
        else if (this._isPublicView)
        {
        <div class="row">
            <div class="col-md-12">
                <CampaignPledgesChart
                    Campaign="@_selectedCampaign">
                </CampaignPledgesChart>
            </div>
        </div>
        <br>
        }

        <div class="row">
            <div class="col-md-8">
                <CampaignHeader 
                    Campaign="@_selectedCampaign" 
                    IsOrganizerView="@_isOrganizerView">
                </CampaignHeader>
            </div>
            <div class="col-md-4"> 
                <CampaignCommands
                    Campaign="@_selectedCampaign"
                    IsOrganizerView="@_isOrganizerView"
                    IsPublicView="@_isPublicView"
                    IsUserView="@_isUserView">
                </CampaignCommands>
            </div>
        </div>

        @if (this._isOrganizerView && this._selectedCampaign.AllPledges.Count > 0)
        {
            <h5 class="mt-5 mb-4">All Pledges</h5>

            <RadzenCard>
                    @foreach (var pledge in _selectedCampaign.AllPledges)
                    {
                        <PledgeTile 
                            Campaign="@_selectedCampaign" 
                            Pledge="@pledge" 
                            IsCommands=true>
                        </PledgeTile>
                    }
            </RadzenCard>
        }

        @if (this._isOrganizerView && this._selectedCampaign.PendingMatchPledges.Count > 0)
        {
            <h5 class="mt-5 mb-4">Pending Match Pledges</h5>

            <RadzenCard>
                    @foreach (var pledge in _selectedCampaign.PendingMatchPledges)
                    {
                        <PledgeTile 
                            Campaign="@_selectedCampaign" 
                            Pledge="@pledge" 
                            IsCommands=false>
                        </PledgeTile>
                    }
            </RadzenCard>
        }

        @if (this._isOrganizerView && this._selectedCampaign.Donors.Count > 0)
        {
            <h5 class="mt-5 mb-4">Top @_selectedCampaign.LastItemsCount Donors</h5>

            <RadzenCard>
                    @foreach (var donor in _selectedCampaign.Donors)
                    {
                        <DonorTile 
                            Campaign="@_selectedCampaign" 
                            Donor="@donor">
                        </DonorTile>
                    }
            </RadzenCard>
        }

        @if (this._isOrganizerView && this._selectedCampaign.RejectedPledges.Count > 0)
        {
            <h5 class="mt-5 mb-4">Latest @_selectedCampaign.LastItemsCount Rejected Pledges</h5>

            <RadzenCard>
                    @foreach (var pledge in _selectedCampaign.RejectedPledges)
                    {
                        <PledgeTile 
                            Campaign="@_selectedCampaign" 
                            Pledge="@pledge" 
                            IsCommands=false>
                        </PledgeTile>
                    }
            </RadzenCard>
        }

        @if (this._isOrganizerView && this._selectedCampaign.ErroredPledges.Count > 0)
        {
            <h5 class="mt-5 mb-4">Latest @_selectedCampaign.LastItemsCount Errored Pledges</h5>

            <RadzenCard>
                    @foreach (var pledge in _selectedCampaign.ErroredPledges)
                    {
                        <PledgeTile 
                            Campaign="@_selectedCampaign" 
                            Pledge="@pledge" 
                            IsCommands=false>
                        </PledgeTile>
                    }
            </RadzenCard>
        }
    </Authorized>
    <NotAuthorized>
        @* <RadzenCard>
            <h3>Not Authorized</h3>
            <p>You do not have permissions to view this area.</p>
        </RadzenCard> *@
    </NotAuthorized>
</AuthorizeView>

<AuthorizeView Roles="Donor">
    <Authorized>
        <div class="row">
            <div class="col-md-8">
                <CampaignHeader 
                    Campaign="@_selectedCampaign" 
                    IsOrganizerView=false>
                </CampaignHeader>
            </div>
            <div class="col-md-4"> 
                <CampaignCommands
                    Campaign="@_selectedCampaign"
                    IsOrganizerView=false
                    IsPublicView=false
                    IsUserView=true>
                </CampaignCommands>
            </div>
        </div>

        @if (this._selectedCampaign.FulfilledPledges.Count > 0)
        {
            <h5 class="mt-5 mb-4">Latest @_selectedCampaign.LastItemsCount Fulfilled Pledges</h5>

            <RadzenCard>
                    @foreach (var pledge in _selectedCampaign.FulfilledPledges)
                    {
                        <PledgeTile 
                            Campaign="@_selectedCampaign" 
                            Pledge="@pledge" 
                            IsCommands=false>
                        </PledgeTile>
                    }
            </RadzenCard>
        }

        @if (this._selectedCampaign.Donors.Count > 0)
        {
            <h5 class="mt-5 mb-4">Top @_selectedCampaign.LastItemsCount Donors</h5>

            <RadzenCard>
                    @foreach (var donor in _selectedCampaign.Donors)
                    {
                        <DonorTile 
                            Campaign="@_selectedCampaign" 
                            Donor="@donor">
                        </DonorTile>
                    }
            </RadzenCard>
        }
    </Authorized>
    <NotAuthorized>
        @* <RadzenCard>
            <h3>Not Authorized</h3>
            <p>You do not have permissions to view this area.</p>
        </RadzenCard> *@
    </NotAuthorized>
</AuthorizeView>

}

@code {
    private bool _isUserView = false;
    private bool _isPublicView = false;
    private bool _isOrganizerView = true;
    private Campaign _selectedCampaign = new Campaign();
    private HubConnection? _campaignHubConnection;
    private HubConnection? _pledgeHubConnection;
    private Pledge _emphasizedPledge = null;
    private Timer _emphasisTimer = default!;
    private dynamic _dlgResult = default;
 
    [Parameter] public string Id { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _selectedCampaign = await _httpClient.GetFromJsonAsync<Campaign>($"function/campaigns/{Id}") ?? new Campaign();

            _campaignHubConnection = new HubConnectionBuilder()
                .WithUrl(_navigationManager.ToAbsoluteUri("/campaignhub"))
                .Build();

            _campaignHubConnection.On<Campaign>("UpdateCampaign", (c) =>
            {
                _selectedCampaign = c;
                StateHasChanged();
            });

            await _campaignHubConnection.StartAsync();

            _pledgeHubConnection = new HubConnectionBuilder()
                .WithUrl(_navigationManager.ToAbsoluteUri("/pledgehub"))
                .Build();

            _pledgeHubConnection.On<Pledge>("EmphasizePledge", async (p) =>
            {
                //Ignore the ones that don't belong to me!!!
                if (this._isPublicView &&
                    p.CampaignIdentifier == _selectedCampaign.Identifier && 
                    this._emphasizedPledge == null)
                {
                    _emphasizedPledge = p;
                    Console.WriteLine($"Received emphasized pledge {p.Identifier}"); 

                    //Since we are running async, we can simply delay instead of timers
                    await Task.Delay(_selectedCampaign.Behavior.EmphasisPledgeDialogStartup);

                    //Restart the timer to run every minute
                    if (_emphasisTimer is not null &&
                        _emphasisTimer.Enabled) 
                    {
                        _emphasisTimer.Stop();
                        _emphasisTimer.Dispose();
                    }

                    _emphasisTimer = new Timer(_selectedCampaign.Behavior.EmphasisPledgeDialogVisibility) { AutoReset = false };
                    _emphasisTimer.Elapsed += TriggerRemoveEmphasis;
                    _emphasisTimer.Start();

                    _dlgResult = await _dialogService.OpenAsync<PledgeTile>($"Pledge Emphasis",
                        new Dictionary<string, object>() { 
                            { "Campaign", _selectedCampaign },
                            { "Pledge", _emphasizedPledge },
                            { "IsCommands", false }
                        },
                        new DialogOptions() { Width = "700px", Height = "400px", Resizable = true, Draggable = true }
                    );
                }
                else 
                {
                    Console.WriteLine($"Ignoring Received emphasized pledge {p.Identifier}"); 
                }
            });

            await _pledgeHubConnection.StartAsync();
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"There was a problem loading campaign data: {ex.Message}");
        }
    }

    public bool IsConnected =>
        _campaignHubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (_campaignHubConnection is not null)
        {
            await _campaignHubConnection.DisposeAsync();
        }

        if (_pledgeHubConnection is not null)
        {
            await _pledgeHubConnection.DisposeAsync();
        }

        if (_emphasisTimer is not null)
        {
            _emphasisTimer.Dispose();
        }
    }

    private void TriggerRemoveEmphasis(object? sender, ElapsedEventArgs e)
    {
        Console.WriteLine($"TriggerRemoveEmphasis"); 
        if (_emphasisTimer is not null)
        {
            _emphasisTimer.Dispose();
        }

        _dialogService.Close(_dlgResult);
        _emphasizedPledge = null;
    }

    private async void TriggerMaintenance(object? sender, ElapsedEventArgs e)
    {
        Console.WriteLine($"TriggerMaintenance: {_selectedCampaign.Periods.Count}"); 
    }

    private void SwitchToPublicView()
    {
        this._isUserView = false;
        this._isPublicView = true;
        this._isOrganizerView = false;
    }

    private void SwitchToOrganizerView()
    {
        this._isUserView = false;
        this._isPublicView = false;
        this._isOrganizerView = true;
    }

    private void SwitchToUserView()
    {
        this._isUserView = true;
        this._isPublicView = false;
        this._isOrganizerView = false;
    }
}
