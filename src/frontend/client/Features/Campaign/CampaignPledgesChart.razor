@using System.Globalization
@using System.Timers
@inject HttpClient _httpClient
@implements IAsyncDisposable

<RadzenCard>
    <h3 class="h5">@PeriodsChartTitle</h3>
    <div class="row">
        <div class="col-md-12">
            <RadzenChart>
                <RadzenColumnSeries Data="@Campaign.Periods" CategoryProperty="Period" Title="@PeriodsTitle" LineType="LineType.Dashed" ValueProperty="Amount" />
                <RadzenColumnOptions Radius="5" />
                <RadzenValueAxis Formatter="@FormatAsUSD">
                    <RadzenGridLines Visible="true" />
                    <RadzenAxisTitle Text="Pledges in USD" />
                </RadzenValueAxis>
            </RadzenChart>            
        </div>
    </div>
</RadzenCard>

@code {
    [Parameter] 
    public Campaign Campaign { get; set; } = default!;

    public string PeriodsChartTitle 
    {
        get {
            return Campaign.PeriodType == FundSinkPeriodTypes.Minute ? $"Pledges in last {Campaign.PeriodsCount} minutes" : $"Pledges in last {Campaign.PeriodsCount} hours";
        }
    }

    public string PeriodsTitle 
    {
        get {
            return Campaign.PeriodType == FundSinkPeriodTypes.Minute ? "Amount per Minute" : "Amount per Hour";
        }
    }

    private Timer _campaignTimer = default!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            //WARNING: Re-retrieve campaign periods because they could be stale
            Console.WriteLine($"Retrieving campaign periods.....");
            Campaign.Periods = await _httpClient.GetFromJsonAsync<List<FundSinkPeriod>>($"function/campaigns/{Campaign.Identifier}/periods") ?? new List<FundSinkPeriod>();
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"There was a problem loading campaign periods: {ex.Message}");
        }
    }

    protected override Task OnParametersSetAsync()
    {
        try
        {
            if (_campaignTimer is not null &&
                _campaignTimer.Enabled) 
            {
                _campaignTimer.Stop();
                _campaignTimer.Dispose();
            }

            _campaignTimer = new Timer((Campaign.PeriodType == FundSinkPeriodTypes.Minute ? 60 : 3600) * 1000) { AutoReset = true };
            _campaignTimer.Elapsed += TriggerMaintenance;
            _campaignTimer.Start();
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"There was a problem loading campaign data: {ex.Message}");
        }

        return base.OnParametersSetAsync();
    }
    
    private async void TriggerMaintenance(object? sender, ElapsedEventArgs e)
    {
        Console.WriteLine($"TriggerMaintenance: {Campaign.Periods.Count}"); 
        ShiftPeriods(Campaign.Periods);
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (_campaignTimer is not null)
        {
            _campaignTimer.Dispose();
        }
    }

    string FormatAsUSD(object value)
    {
        return ((double)value).ToString("C0", CultureInfo.CreateSpecificCulture("en-US"));
    }

    private static void ShiftPeriods(List<FundSinkPeriod> lst)
    {
        if (lst == null || lst.Count <= 1)
        {
            return;
        }

        for (int i = 0; i < lst.Count - 1; i++)
        {
            lst[i] = lst[i + 1];
            lst[i].Period = $"-{(lst.Count - 1) - i}";
        }

        lst[lst.Count - 1] = new FundSinkPeriod() {Period = "0", Amount = 0, Count = 0};
    }

    //WARNING: Not used - kept for reference
    private static void ShiftLeft<T>(List<T> lst, int shifts)
    {
        for (int i = shifts; i < lst.Count; i++)
        {
            lst[i - shifts] = lst[i];
        }

        for (int i = lst.Count - shifts; i < lst.Count; i++)
        {
            lst[i] = default(T);
        }
    }
}