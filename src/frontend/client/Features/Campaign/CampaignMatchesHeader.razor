@using System.Globalization

<RadzenCard>
    <div class="row">
        <div class="col-md-11">
        </div>
        <div class="col-md-1">
            <span class="float-right"><RadzenSwitch @bind-Value=@_fullMode Change=@(args => OnChange(args, "Mode")) Name="Mode" /></span>
        </div>
    </div>

    <div class="row">
        <div class="col-md-4">
            <div>Active Match Fund/Goal</div>
            <b>@Utilities.FormatAsUSD(MatchCompletedAmount) / @Utilities.FormatAsUSD(MatchFullAmount)</b>
            @if (_fullMode)
            {
                <div class="mt-3">Active Match Progress</div>
                @if (IsActiveMatch) 
                {
                    <RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Primary" ShowValue="false" Value="@MatchCompletedAmount" Max="@MatchFullAmount" />
                }
                else
                {
                    <span>No active match</span>                
                }
            }
        </div>
        <div class="col-md-4">
            <div>Pending Match Pledges</div>
            <b>@Campaign.PendingMatchPledgesCount</b>
            @if (_fullMode)
            {
                <div class="mt-3">Pending Match Pledges Amount</div>
                <b>@Utilities.FormatAsUSD(Campaign.PendingMatchPledgesAmount)</b>
            }
        </div>
        <div class="col-md-4">
            <div>Pending Deferred Pledges</div>
            <b>@Campaign.PendingDeferredPledgesCount</b>
            @if (_fullMode)
            {
                <div class="mt-3">Pending Deferred Pledges Amount</div>
                <b>@Utilities.FormatAsUSD(Campaign.PendingDeferredPledgesAmount)</b>
            }
        </div>
    </div>
</RadzenCard>

@code {
    [Parameter] 
    public Campaign Campaign { get; set; } = default!;

    private double MatchCompletionRatio 
    {
        get
        {
            if (Campaign != null && Campaign.ActiveMatchPledge != null && Campaign.ActiveMatchPledge.Amount > 0)
            {
                return Campaign.MatchFund / Campaign.ActiveMatchPledge.Amount;
            }

            return 0;
        }
    }

    private double MatchCompletedAmount 
    {
        get
        {
            return Campaign.MatchFund;
        }
    }

    private double MatchFullAmount 
    {
        get
        {
            if (Campaign != null && Campaign.ActiveMatchPledge != null && Campaign.ActiveMatchPledge.Amount > 0)
            {
                return Campaign.ActiveMatchPledge.Amount;
            }

            return 0;
        }
    }
    private bool IsActiveMatch 
    {
        get
        {
            if (Campaign != null && Campaign.ActiveMatchPledge != null && Campaign.ActiveMatchPledge.Amount > 0)
            {
                return true;
            }

            return false;
        }
    }

    private bool _fullMode = false;

    void OnChange(bool? value, string name)
    {
        Console.WriteLine($"{name} value changed to {value} - {_fullMode}");
    }
}